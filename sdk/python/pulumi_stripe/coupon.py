# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['CouponArgs', 'Coupon']

@pulumi.input_type
class CouponArgs:
    def __init__(__self__, *,
                 amount_off: Optional[pulumi.Input[builtins.int]] = None,
                 applies_tos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 coupon_id: Optional[pulumi.Input[builtins.str]] = None,
                 currency: Optional[pulumi.Input[builtins.str]] = None,
                 duration: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_months: Optional[pulumi.Input[builtins.int]] = None,
                 max_redemptions: Optional[pulumi.Input[builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 percent_off: Optional[pulumi.Input[builtins.float]] = None,
                 redeem_by: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a Coupon resource.
        :param pulumi.Input[builtins.int] amount_off: Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] applies_tos: A list of product IDs this coupon applies to
        :param pulumi.Input[builtins.str] coupon_id: Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
               want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        :param pulumi.Input[builtins.str] currency: If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        :param pulumi.Input[builtins.str] duration: One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        :param pulumi.Input[builtins.int] duration_in_months: If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        :param pulumi.Input[builtins.int] max_redemptions: Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
               object in a structured format.
        :param pulumi.Input[builtins.str] name: Name of the coupon displayed to customers on for instance invoices or receipts.
        :param pulumi.Input[builtins.float] percent_off: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
               example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        :param pulumi.Input[builtins.str] redeem_by: Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        """
        if amount_off is not None:
            pulumi.set(__self__, "amount_off", amount_off)
        if applies_tos is not None:
            pulumi.set(__self__, "applies_tos", applies_tos)
        if coupon_id is not None:
            pulumi.set(__self__, "coupon_id", coupon_id)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duration_in_months is not None:
            pulumi.set(__self__, "duration_in_months", duration_in_months)
        if max_redemptions is not None:
            pulumi.set(__self__, "max_redemptions", max_redemptions)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if percent_off is not None:
            pulumi.set(__self__, "percent_off", percent_off)
        if redeem_by is not None:
            pulumi.set(__self__, "redeem_by", redeem_by)

    @property
    @pulumi.getter(name="amountOff")
    def amount_off(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        """
        return pulumi.get(self, "amount_off")

    @amount_off.setter
    def amount_off(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "amount_off", value)

    @property
    @pulumi.getter(name="appliesTos")
    def applies_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of product IDs this coupon applies to
        """
        return pulumi.get(self, "applies_tos")

    @applies_tos.setter
    def applies_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "applies_tos", value)

    @property
    @pulumi.getter(name="couponId")
    def coupon_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
        want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        """
        return pulumi.get(self, "coupon_id")

    @coupon_id.setter
    def coupon_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "coupon_id", value)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="durationInMonths")
    def duration_in_months(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        """
        return pulumi.get(self, "duration_in_months")

    @duration_in_months.setter
    def duration_in_months(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "duration_in_months", value)

    @property
    @pulumi.getter(name="maxRedemptions")
    def max_redemptions(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        """
        return pulumi.get(self, "max_redemptions")

    @max_redemptions.setter
    def max_redemptions(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_redemptions", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the coupon displayed to customers on for instance invoices or receipts.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="percentOff")
    def percent_off(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
        example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        """
        return pulumi.get(self, "percent_off")

    @percent_off.setter
    def percent_off(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "percent_off", value)

    @property
    @pulumi.getter(name="redeemBy")
    def redeem_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        """
        return pulumi.get(self, "redeem_by")

    @redeem_by.setter
    def redeem_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redeem_by", value)


@pulumi.input_type
class _CouponState:
    def __init__(__self__, *,
                 amount_off: Optional[pulumi.Input[builtins.int]] = None,
                 applies_tos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 coupon_id: Optional[pulumi.Input[builtins.str]] = None,
                 currency: Optional[pulumi.Input[builtins.str]] = None,
                 duration: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_months: Optional[pulumi.Input[builtins.int]] = None,
                 max_redemptions: Optional[pulumi.Input[builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 percent_off: Optional[pulumi.Input[builtins.float]] = None,
                 redeem_by: Optional[pulumi.Input[builtins.str]] = None,
                 times_redeemed: Optional[pulumi.Input[builtins.int]] = None,
                 valid: Optional[pulumi.Input[builtins.bool]] = None):
        """
        Input properties used for looking up and filtering Coupon resources.
        :param pulumi.Input[builtins.int] amount_off: Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] applies_tos: A list of product IDs this coupon applies to
        :param pulumi.Input[builtins.str] coupon_id: Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
               want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        :param pulumi.Input[builtins.str] currency: If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        :param pulumi.Input[builtins.str] duration: One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        :param pulumi.Input[builtins.int] duration_in_months: If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        :param pulumi.Input[builtins.int] max_redemptions: Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
               object in a structured format.
        :param pulumi.Input[builtins.str] name: Name of the coupon displayed to customers on for instance invoices or receipts.
        :param pulumi.Input[builtins.float] percent_off: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
               example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        :param pulumi.Input[builtins.str] redeem_by: Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        :param pulumi.Input[builtins.int] times_redeemed: Number of times this coupon has been applied to a customer.
        :param pulumi.Input[builtins.bool] valid: Taking account of the above properties, whether this coupon can still be applied to a customer.
        """
        if amount_off is not None:
            pulumi.set(__self__, "amount_off", amount_off)
        if applies_tos is not None:
            pulumi.set(__self__, "applies_tos", applies_tos)
        if coupon_id is not None:
            pulumi.set(__self__, "coupon_id", coupon_id)
        if currency is not None:
            pulumi.set(__self__, "currency", currency)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if duration_in_months is not None:
            pulumi.set(__self__, "duration_in_months", duration_in_months)
        if max_redemptions is not None:
            pulumi.set(__self__, "max_redemptions", max_redemptions)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if percent_off is not None:
            pulumi.set(__self__, "percent_off", percent_off)
        if redeem_by is not None:
            pulumi.set(__self__, "redeem_by", redeem_by)
        if times_redeemed is not None:
            pulumi.set(__self__, "times_redeemed", times_redeemed)
        if valid is not None:
            pulumi.set(__self__, "valid", valid)

    @property
    @pulumi.getter(name="amountOff")
    def amount_off(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        """
        return pulumi.get(self, "amount_off")

    @amount_off.setter
    def amount_off(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "amount_off", value)

    @property
    @pulumi.getter(name="appliesTos")
    def applies_tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        A list of product IDs this coupon applies to
        """
        return pulumi.get(self, "applies_tos")

    @applies_tos.setter
    def applies_tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "applies_tos", value)

    @property
    @pulumi.getter(name="couponId")
    def coupon_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
        want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        """
        return pulumi.get(self, "coupon_id")

    @coupon_id.setter
    def coupon_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "coupon_id", value)

    @property
    @pulumi.getter
    def currency(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        """
        return pulumi.get(self, "currency")

    @currency.setter
    def currency(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "currency", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="durationInMonths")
    def duration_in_months(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        """
        return pulumi.get(self, "duration_in_months")

    @duration_in_months.setter
    def duration_in_months(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "duration_in_months", value)

    @property
    @pulumi.getter(name="maxRedemptions")
    def max_redemptions(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        """
        return pulumi.get(self, "max_redemptions")

    @max_redemptions.setter
    def max_redemptions(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_redemptions", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Name of the coupon displayed to customers on for instance invoices or receipts.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="percentOff")
    def percent_off(self) -> Optional[pulumi.Input[builtins.float]]:
        """
        Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
        example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        """
        return pulumi.get(self, "percent_off")

    @percent_off.setter
    def percent_off(self, value: Optional[pulumi.Input[builtins.float]]):
        pulumi.set(self, "percent_off", value)

    @property
    @pulumi.getter(name="redeemBy")
    def redeem_by(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        """
        return pulumi.get(self, "redeem_by")

    @redeem_by.setter
    def redeem_by(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "redeem_by", value)

    @property
    @pulumi.getter(name="timesRedeemed")
    def times_redeemed(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Number of times this coupon has been applied to a customer.
        """
        return pulumi.get(self, "times_redeemed")

    @times_redeemed.setter
    def times_redeemed(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "times_redeemed", value)

    @property
    @pulumi.getter
    def valid(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Taking account of the above properties, whether this coupon can still be applied to a customer.
        """
        return pulumi.get(self, "valid")

    @valid.setter
    def valid(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "valid", value)


@pulumi.type_token("stripe:index/coupon:Coupon")
class Coupon(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amount_off: Optional[pulumi.Input[builtins.int]] = None,
                 applies_tos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 coupon_id: Optional[pulumi.Input[builtins.str]] = None,
                 currency: Optional[pulumi.Input[builtins.str]] = None,
                 duration: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_months: Optional[pulumi.Input[builtins.int]] = None,
                 max_redemptions: Optional[pulumi.Input[builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 percent_off: Optional[pulumi.Input[builtins.float]] = None,
                 redeem_by: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a Coupon resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] amount_off: Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] applies_tos: A list of product IDs this coupon applies to
        :param pulumi.Input[builtins.str] coupon_id: Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
               want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        :param pulumi.Input[builtins.str] currency: If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        :param pulumi.Input[builtins.str] duration: One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        :param pulumi.Input[builtins.int] duration_in_months: If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        :param pulumi.Input[builtins.int] max_redemptions: Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
               object in a structured format.
        :param pulumi.Input[builtins.str] name: Name of the coupon displayed to customers on for instance invoices or receipts.
        :param pulumi.Input[builtins.float] percent_off: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
               example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        :param pulumi.Input[builtins.str] redeem_by: Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CouponArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Coupon resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CouponArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CouponArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amount_off: Optional[pulumi.Input[builtins.int]] = None,
                 applies_tos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 coupon_id: Optional[pulumi.Input[builtins.str]] = None,
                 currency: Optional[pulumi.Input[builtins.str]] = None,
                 duration: Optional[pulumi.Input[builtins.str]] = None,
                 duration_in_months: Optional[pulumi.Input[builtins.int]] = None,
                 max_redemptions: Optional[pulumi.Input[builtins.int]] = None,
                 metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 percent_off: Optional[pulumi.Input[builtins.float]] = None,
                 redeem_by: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CouponArgs.__new__(CouponArgs)

            __props__.__dict__["amount_off"] = amount_off
            __props__.__dict__["applies_tos"] = applies_tos
            __props__.__dict__["coupon_id"] = coupon_id
            __props__.__dict__["currency"] = currency
            __props__.__dict__["duration"] = duration
            __props__.__dict__["duration_in_months"] = duration_in_months
            __props__.__dict__["max_redemptions"] = max_redemptions
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["name"] = name
            __props__.__dict__["percent_off"] = percent_off
            __props__.__dict__["redeem_by"] = redeem_by
            __props__.__dict__["times_redeemed"] = None
            __props__.__dict__["valid"] = None
        super(Coupon, __self__).__init__(
            'stripe:index/coupon:Coupon',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            amount_off: Optional[pulumi.Input[builtins.int]] = None,
            applies_tos: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
            coupon_id: Optional[pulumi.Input[builtins.str]] = None,
            currency: Optional[pulumi.Input[builtins.str]] = None,
            duration: Optional[pulumi.Input[builtins.str]] = None,
            duration_in_months: Optional[pulumi.Input[builtins.int]] = None,
            max_redemptions: Optional[pulumi.Input[builtins.int]] = None,
            metadata: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
            name: Optional[pulumi.Input[builtins.str]] = None,
            percent_off: Optional[pulumi.Input[builtins.float]] = None,
            redeem_by: Optional[pulumi.Input[builtins.str]] = None,
            times_redeemed: Optional[pulumi.Input[builtins.int]] = None,
            valid: Optional[pulumi.Input[builtins.bool]] = None) -> 'Coupon':
        """
        Get an existing Coupon resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.int] amount_off: Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] applies_tos: A list of product IDs this coupon applies to
        :param pulumi.Input[builtins.str] coupon_id: Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
               want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        :param pulumi.Input[builtins.str] currency: If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        :param pulumi.Input[builtins.str] duration: One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        :param pulumi.Input[builtins.int] duration_in_months: If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        :param pulumi.Input[builtins.int] max_redemptions: Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] metadata: Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
               object in a structured format.
        :param pulumi.Input[builtins.str] name: Name of the coupon displayed to customers on for instance invoices or receipts.
        :param pulumi.Input[builtins.float] percent_off: Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
               example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        :param pulumi.Input[builtins.str] redeem_by: Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        :param pulumi.Input[builtins.int] times_redeemed: Number of times this coupon has been applied to a customer.
        :param pulumi.Input[builtins.bool] valid: Taking account of the above properties, whether this coupon can still be applied to a customer.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CouponState.__new__(_CouponState)

        __props__.__dict__["amount_off"] = amount_off
        __props__.__dict__["applies_tos"] = applies_tos
        __props__.__dict__["coupon_id"] = coupon_id
        __props__.__dict__["currency"] = currency
        __props__.__dict__["duration"] = duration
        __props__.__dict__["duration_in_months"] = duration_in_months
        __props__.__dict__["max_redemptions"] = max_redemptions
        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["name"] = name
        __props__.__dict__["percent_off"] = percent_off
        __props__.__dict__["redeem_by"] = redeem_by
        __props__.__dict__["times_redeemed"] = times_redeemed
        __props__.__dict__["valid"] = valid
        return Coupon(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="amountOff")
    def amount_off(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Amount (in the currency specified) that will be taken off the subtotal of any invoices for this customer.
        """
        return pulumi.get(self, "amount_off")

    @property
    @pulumi.getter(name="appliesTos")
    def applies_tos(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        A list of product IDs this coupon applies to
        """
        return pulumi.get(self, "applies_tos")

    @property
    @pulumi.getter(name="couponId")
    def coupon_id(self) -> pulumi.Output[builtins.str]:
        """
        Unique string of your choice that will be used to identify this coupon when applying it to a customer. If you don’t
        want to specify a particular code, you can leave the ID blank and we’ll generate a random code for you.
        """
        return pulumi.get(self, "coupon_id")

    @property
    @pulumi.getter
    def currency(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        If amount_off has been set, the three-letter ISO code for the currency of the amount to take off.
        """
        return pulumi.get(self, "currency")

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        One of forever, once, and repeating. Describes how long a customer who applies this coupon will get the discount.
        """
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="durationInMonths")
    def duration_in_months(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        If duration is repeating, the number of months the coupon applies. Null if coupon duration is forever or once.
        """
        return pulumi.get(self, "duration_in_months")

    @property
    @pulumi.getter(name="maxRedemptions")
    def max_redemptions(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
        """
        return pulumi.get(self, "max_redemptions")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        object in a structured format.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Name of the coupon displayed to customers on for instance invoices or receipts.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="percentOff")
    def percent_off(self) -> pulumi.Output[Optional[builtins.float]]:
        """
        Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For
        example, a coupon with percent_off of 50 will make a $100 invoice $50 instead.
        """
        return pulumi.get(self, "percent_off")

    @property
    @pulumi.getter(name="redeemBy")
    def redeem_by(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Date after which the coupon can no longer be redeemed. Expected format is RFC3339
        """
        return pulumi.get(self, "redeem_by")

    @property
    @pulumi.getter(name="timesRedeemed")
    def times_redeemed(self) -> pulumi.Output[builtins.int]:
        """
        Number of times this coupon has been applied to a customer.
        """
        return pulumi.get(self, "times_redeemed")

    @property
    @pulumi.getter
    def valid(self) -> pulumi.Output[builtins.bool]:
        """
        Taking account of the above properties, whether this coupon can still be applied to a customer.
        """
        return pulumi.get(self, "valid")

