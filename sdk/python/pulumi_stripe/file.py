# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FileArgs', 'File']

@pulumi.input_type
class FileArgs:
    def __init__(__self__, *,
                 base64content: pulumi.Input[builtins.str],
                 filename: pulumi.Input[builtins.str],
                 purpose: pulumi.Input[builtins.str],
                 link_data: Optional[pulumi.Input['FileLinkDataArgs']] = None):
        """
        The set of arguments for constructing a File resource.
        :param pulumi.Input[builtins.str] base64content: A content file to upload encoded by base64.
        :param pulumi.Input[builtins.str] filename: The suitable name for saving the file to a filesystem.
        :param pulumi.Input[builtins.str] purpose: The purpose of the uploaded file.
        :param pulumi.Input['FileLinkDataArgs'] link_data: Optional parameters that automatically create a file link for the newly created file.
        """
        pulumi.set(__self__, "base64content", base64content)
        pulumi.set(__self__, "filename", filename)
        pulumi.set(__self__, "purpose", purpose)
        if link_data is not None:
            pulumi.set(__self__, "link_data", link_data)

    @property
    @pulumi.getter
    def base64content(self) -> pulumi.Input[builtins.str]:
        """
        A content file to upload encoded by base64.
        """
        return pulumi.get(self, "base64content")

    @base64content.setter
    def base64content(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "base64content", value)

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Input[builtins.str]:
        """
        The suitable name for saving the file to a filesystem.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter
    def purpose(self) -> pulumi.Input[builtins.str]:
        """
        The purpose of the uploaded file.
        """
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter(name="linkData")
    def link_data(self) -> Optional[pulumi.Input['FileLinkDataArgs']]:
        """
        Optional parameters that automatically create a file link for the newly created file.
        """
        return pulumi.get(self, "link_data")

    @link_data.setter
    def link_data(self, value: Optional[pulumi.Input['FileLinkDataArgs']]):
        pulumi.set(self, "link_data", value)


@pulumi.input_type
class _FileState:
    def __init__(__self__, *,
                 base64content: Optional[pulumi.Input[builtins.str]] = None,
                 created: Optional[pulumi.Input[builtins.int]] = None,
                 expires_at: Optional[pulumi.Input[builtins.int]] = None,
                 filename: Optional[pulumi.Input[builtins.str]] = None,
                 link_data: Optional[pulumi.Input['FileLinkDataArgs']] = None,
                 links: Optional[pulumi.Input[Sequence[pulumi.Input['FileLinkArgs']]]] = None,
                 object: Optional[pulumi.Input[builtins.str]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 size: Optional[pulumi.Input[builtins.int]] = None,
                 type: Optional[pulumi.Input[builtins.str]] = None,
                 url: Optional[pulumi.Input[builtins.str]] = None):
        """
        Input properties used for looking up and filtering File resources.
        :param pulumi.Input[builtins.str] base64content: A content file to upload encoded by base64.
        :param pulumi.Input[builtins.int] created: Time at which the object was created. Measured in seconds since the Unix epoch.
        :param pulumi.Input[builtins.int] expires_at: The file expires and isn’t available at this time in epoch seconds.
        :param pulumi.Input[builtins.str] filename: The suitable name for saving the file to a filesystem.
        :param pulumi.Input['FileLinkDataArgs'] link_data: Optional parameters that automatically create a file link for the newly created file.
        :param pulumi.Input[builtins.str] object: String representing the object’s type. Objects of the same type share the same value.
        :param pulumi.Input[builtins.str] purpose: The purpose of the uploaded file.
        :param pulumi.Input[builtins.int] size: The size of the file object in bytes.
        :param pulumi.Input[builtins.str] type: The returned file type (for example, csv, pdf, jpg, or png).
        :param pulumi.Input[builtins.str] url: Use your live secret API key to download the file from this URL.
        """
        if base64content is not None:
            pulumi.set(__self__, "base64content", base64content)
        if created is not None:
            pulumi.set(__self__, "created", created)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if link_data is not None:
            pulumi.set(__self__, "link_data", link_data)
        if links is not None:
            pulumi.set(__self__, "links", links)
        if object is not None:
            pulumi.set(__self__, "object", object)
        if purpose is not None:
            pulumi.set(__self__, "purpose", purpose)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def base64content(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        A content file to upload encoded by base64.
        """
        return pulumi.get(self, "base64content")

    @base64content.setter
    def base64content(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "base64content", value)

    @property
    @pulumi.getter
    def created(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        Time at which the object was created. Measured in seconds since the Unix epoch.
        """
        return pulumi.get(self, "created")

    @created.setter
    def created(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "created", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The file expires and isn’t available at this time in epoch seconds.
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The suitable name for saving the file to a filesystem.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "filename", value)

    @property
    @pulumi.getter(name="linkData")
    def link_data(self) -> Optional[pulumi.Input['FileLinkDataArgs']]:
        """
        Optional parameters that automatically create a file link for the newly created file.
        """
        return pulumi.get(self, "link_data")

    @link_data.setter
    def link_data(self, value: Optional[pulumi.Input['FileLinkDataArgs']]):
        pulumi.set(self, "link_data", value)

    @property
    @pulumi.getter
    def links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FileLinkArgs']]]]:
        return pulumi.get(self, "links")

    @links.setter
    def links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FileLinkArgs']]]]):
        pulumi.set(self, "links", value)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        String representing the object’s type. Objects of the same type share the same value.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter
    def purpose(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The purpose of the uploaded file.
        """
        return pulumi.get(self, "purpose")

    @purpose.setter
    def purpose(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "purpose", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The size of the file object in bytes.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The returned file type (for example, csv, pdf, jpg, or png).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Use your live secret API key to download the file from this URL.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "url", value)


@pulumi.type_token("stripe:index/file:File")
class File(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base64content: Optional[pulumi.Input[builtins.str]] = None,
                 filename: Optional[pulumi.Input[builtins.str]] = None,
                 link_data: Optional[pulumi.Input[Union['FileLinkDataArgs', 'FileLinkDataArgsDict']]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Create a File resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] base64content: A content file to upload encoded by base64.
        :param pulumi.Input[builtins.str] filename: The suitable name for saving the file to a filesystem.
        :param pulumi.Input[Union['FileLinkDataArgs', 'FileLinkDataArgsDict']] link_data: Optional parameters that automatically create a file link for the newly created file.
        :param pulumi.Input[builtins.str] purpose: The purpose of the uploaded file.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FileArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a File resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FileArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FileArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 base64content: Optional[pulumi.Input[builtins.str]] = None,
                 filename: Optional[pulumi.Input[builtins.str]] = None,
                 link_data: Optional[pulumi.Input[Union['FileLinkDataArgs', 'FileLinkDataArgsDict']]] = None,
                 purpose: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FileArgs.__new__(FileArgs)

            if base64content is None and not opts.urn:
                raise TypeError("Missing required property 'base64content'")
            __props__.__dict__["base64content"] = base64content
            if filename is None and not opts.urn:
                raise TypeError("Missing required property 'filename'")
            __props__.__dict__["filename"] = filename
            __props__.__dict__["link_data"] = link_data
            if purpose is None and not opts.urn:
                raise TypeError("Missing required property 'purpose'")
            __props__.__dict__["purpose"] = purpose
            __props__.__dict__["created"] = None
            __props__.__dict__["expires_at"] = None
            __props__.__dict__["links"] = None
            __props__.__dict__["object"] = None
            __props__.__dict__["size"] = None
            __props__.__dict__["type"] = None
            __props__.__dict__["url"] = None
        super(File, __self__).__init__(
            'stripe:index/file:File',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            base64content: Optional[pulumi.Input[builtins.str]] = None,
            created: Optional[pulumi.Input[builtins.int]] = None,
            expires_at: Optional[pulumi.Input[builtins.int]] = None,
            filename: Optional[pulumi.Input[builtins.str]] = None,
            link_data: Optional[pulumi.Input[Union['FileLinkDataArgs', 'FileLinkDataArgsDict']]] = None,
            links: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FileLinkArgs', 'FileLinkArgsDict']]]]] = None,
            object: Optional[pulumi.Input[builtins.str]] = None,
            purpose: Optional[pulumi.Input[builtins.str]] = None,
            size: Optional[pulumi.Input[builtins.int]] = None,
            type: Optional[pulumi.Input[builtins.str]] = None,
            url: Optional[pulumi.Input[builtins.str]] = None) -> 'File':
        """
        Get an existing File resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] base64content: A content file to upload encoded by base64.
        :param pulumi.Input[builtins.int] created: Time at which the object was created. Measured in seconds since the Unix epoch.
        :param pulumi.Input[builtins.int] expires_at: The file expires and isn’t available at this time in epoch seconds.
        :param pulumi.Input[builtins.str] filename: The suitable name for saving the file to a filesystem.
        :param pulumi.Input[Union['FileLinkDataArgs', 'FileLinkDataArgsDict']] link_data: Optional parameters that automatically create a file link for the newly created file.
        :param pulumi.Input[builtins.str] object: String representing the object’s type. Objects of the same type share the same value.
        :param pulumi.Input[builtins.str] purpose: The purpose of the uploaded file.
        :param pulumi.Input[builtins.int] size: The size of the file object in bytes.
        :param pulumi.Input[builtins.str] type: The returned file type (for example, csv, pdf, jpg, or png).
        :param pulumi.Input[builtins.str] url: Use your live secret API key to download the file from this URL.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FileState.__new__(_FileState)

        __props__.__dict__["base64content"] = base64content
        __props__.__dict__["created"] = created
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["filename"] = filename
        __props__.__dict__["link_data"] = link_data
        __props__.__dict__["links"] = links
        __props__.__dict__["object"] = object
        __props__.__dict__["purpose"] = purpose
        __props__.__dict__["size"] = size
        __props__.__dict__["type"] = type
        __props__.__dict__["url"] = url
        return File(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def base64content(self) -> pulumi.Output[builtins.str]:
        """
        A content file to upload encoded by base64.
        """
        return pulumi.get(self, "base64content")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[builtins.int]:
        """
        Time at which the object was created. Measured in seconds since the Unix epoch.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[builtins.int]:
        """
        The file expires and isn’t available at this time in epoch seconds.
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def filename(self) -> pulumi.Output[builtins.str]:
        """
        The suitable name for saving the file to a filesystem.
        """
        return pulumi.get(self, "filename")

    @property
    @pulumi.getter(name="linkData")
    def link_data(self) -> pulumi.Output[Optional['outputs.FileLinkData']]:
        """
        Optional parameters that automatically create a file link for the newly created file.
        """
        return pulumi.get(self, "link_data")

    @property
    @pulumi.getter
    def links(self) -> pulumi.Output[Sequence['outputs.FileLink']]:
        return pulumi.get(self, "links")

    @property
    @pulumi.getter
    def object(self) -> pulumi.Output[builtins.str]:
        """
        String representing the object’s type. Objects of the same type share the same value.
        """
        return pulumi.get(self, "object")

    @property
    @pulumi.getter
    def purpose(self) -> pulumi.Output[builtins.str]:
        """
        The purpose of the uploaded file.
        """
        return pulumi.get(self, "purpose")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[builtins.int]:
        """
        The size of the file object in bytes.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[builtins.str]:
        """
        The returned file type (for example, csv, pdf, jpg, or png).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[builtins.str]:
        """
        Use your live secret API key to download the file from this URL.
        """
        return pulumi.get(self, "url")

