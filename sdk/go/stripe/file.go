// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stripe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/systemfsoftware/pulumi-stripe/sdk/go/stripe/internal"
)

type File struct {
	pulumi.CustomResourceState

	// A content file to upload encoded by base64.
	Base64content pulumi.StringOutput `pulumi:"base64content"`
	// Time at which the object was created. Measured in seconds since the Unix epoch.
	Created pulumi.IntOutput `pulumi:"created"`
	// The file expires and isn’t available at this time in epoch seconds.
	ExpiresAt pulumi.IntOutput `pulumi:"expiresAt"`
	// The suitable name for saving the file to a filesystem.
	Filename pulumi.StringOutput `pulumi:"filename"`
	// Optional parameters that automatically create a file link for the newly created file.
	LinkData FileLinkDataPtrOutput `pulumi:"linkData"`
	Links    FileLinkArrayOutput   `pulumi:"links"`
	// String representing the object’s type. Objects of the same type share the same value.
	Object pulumi.StringOutput `pulumi:"object"`
	// The purpose of the uploaded file.
	Purpose pulumi.StringOutput `pulumi:"purpose"`
	// The size of the file object in bytes.
	Size pulumi.IntOutput `pulumi:"size"`
	// The returned file type (for example, csv, pdf, jpg, or png).
	Type pulumi.StringOutput `pulumi:"type"`
	// Use your live secret API key to download the file from this URL.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewFile registers a new resource with the given unique name, arguments, and options.
func NewFile(ctx *pulumi.Context,
	name string, args *FileArgs, opts ...pulumi.ResourceOption) (*File, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Base64content == nil {
		return nil, errors.New("invalid value for required argument 'Base64content'")
	}
	if args.Filename == nil {
		return nil, errors.New("invalid value for required argument 'Filename'")
	}
	if args.Purpose == nil {
		return nil, errors.New("invalid value for required argument 'Purpose'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource File
	err := ctx.RegisterResource("stripe:index/file:File", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFile gets an existing File resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileState, opts ...pulumi.ResourceOption) (*File, error) {
	var resource File
	err := ctx.ReadResource("stripe:index/file:File", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering File resources.
type fileState struct {
	// A content file to upload encoded by base64.
	Base64content *string `pulumi:"base64content"`
	// Time at which the object was created. Measured in seconds since the Unix epoch.
	Created *int `pulumi:"created"`
	// The file expires and isn’t available at this time in epoch seconds.
	ExpiresAt *int `pulumi:"expiresAt"`
	// The suitable name for saving the file to a filesystem.
	Filename *string `pulumi:"filename"`
	// Optional parameters that automatically create a file link for the newly created file.
	LinkData *FileLinkData `pulumi:"linkData"`
	Links    []FileLink    `pulumi:"links"`
	// String representing the object’s type. Objects of the same type share the same value.
	Object *string `pulumi:"object"`
	// The purpose of the uploaded file.
	Purpose *string `pulumi:"purpose"`
	// The size of the file object in bytes.
	Size *int `pulumi:"size"`
	// The returned file type (for example, csv, pdf, jpg, or png).
	Type *string `pulumi:"type"`
	// Use your live secret API key to download the file from this URL.
	Url *string `pulumi:"url"`
}

type FileState struct {
	// A content file to upload encoded by base64.
	Base64content pulumi.StringPtrInput
	// Time at which the object was created. Measured in seconds since the Unix epoch.
	Created pulumi.IntPtrInput
	// The file expires and isn’t available at this time in epoch seconds.
	ExpiresAt pulumi.IntPtrInput
	// The suitable name for saving the file to a filesystem.
	Filename pulumi.StringPtrInput
	// Optional parameters that automatically create a file link for the newly created file.
	LinkData FileLinkDataPtrInput
	Links    FileLinkArrayInput
	// String representing the object’s type. Objects of the same type share the same value.
	Object pulumi.StringPtrInput
	// The purpose of the uploaded file.
	Purpose pulumi.StringPtrInput
	// The size of the file object in bytes.
	Size pulumi.IntPtrInput
	// The returned file type (for example, csv, pdf, jpg, or png).
	Type pulumi.StringPtrInput
	// Use your live secret API key to download the file from this URL.
	Url pulumi.StringPtrInput
}

func (FileState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileState)(nil)).Elem()
}

type fileArgs struct {
	// A content file to upload encoded by base64.
	Base64content string `pulumi:"base64content"`
	// The suitable name for saving the file to a filesystem.
	Filename string `pulumi:"filename"`
	// Optional parameters that automatically create a file link for the newly created file.
	LinkData *FileLinkData `pulumi:"linkData"`
	// The purpose of the uploaded file.
	Purpose string `pulumi:"purpose"`
}

// The set of arguments for constructing a File resource.
type FileArgs struct {
	// A content file to upload encoded by base64.
	Base64content pulumi.StringInput
	// The suitable name for saving the file to a filesystem.
	Filename pulumi.StringInput
	// Optional parameters that automatically create a file link for the newly created file.
	LinkData FileLinkDataPtrInput
	// The purpose of the uploaded file.
	Purpose pulumi.StringInput
}

func (FileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileArgs)(nil)).Elem()
}

type FileInput interface {
	pulumi.Input

	ToFileOutput() FileOutput
	ToFileOutputWithContext(ctx context.Context) FileOutput
}

func (*File) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (i *File) ToFileOutput() FileOutput {
	return i.ToFileOutputWithContext(context.Background())
}

func (i *File) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileOutput)
}

// FileArrayInput is an input type that accepts FileArray and FileArrayOutput values.
// You can construct a concrete instance of `FileArrayInput` via:
//
//	FileArray{ FileArgs{...} }
type FileArrayInput interface {
	pulumi.Input

	ToFileArrayOutput() FileArrayOutput
	ToFileArrayOutputWithContext(context.Context) FileArrayOutput
}

type FileArray []FileInput

func (FileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (i FileArray) ToFileArrayOutput() FileArrayOutput {
	return i.ToFileArrayOutputWithContext(context.Background())
}

func (i FileArray) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileArrayOutput)
}

// FileMapInput is an input type that accepts FileMap and FileMapOutput values.
// You can construct a concrete instance of `FileMapInput` via:
//
//	FileMap{ "key": FileArgs{...} }
type FileMapInput interface {
	pulumi.Input

	ToFileMapOutput() FileMapOutput
	ToFileMapOutputWithContext(context.Context) FileMapOutput
}

type FileMap map[string]FileInput

func (FileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (i FileMap) ToFileMapOutput() FileMapOutput {
	return i.ToFileMapOutputWithContext(context.Background())
}

func (i FileMap) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileMapOutput)
}

type FileOutput struct{ *pulumi.OutputState }

func (FileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**File)(nil)).Elem()
}

func (o FileOutput) ToFileOutput() FileOutput {
	return o
}

func (o FileOutput) ToFileOutputWithContext(ctx context.Context) FileOutput {
	return o
}

// A content file to upload encoded by base64.
func (o FileOutput) Base64content() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Base64content }).(pulumi.StringOutput)
}

// Time at which the object was created. Measured in seconds since the Unix epoch.
func (o FileOutput) Created() pulumi.IntOutput {
	return o.ApplyT(func(v *File) pulumi.IntOutput { return v.Created }).(pulumi.IntOutput)
}

// The file expires and isn’t available at this time in epoch seconds.
func (o FileOutput) ExpiresAt() pulumi.IntOutput {
	return o.ApplyT(func(v *File) pulumi.IntOutput { return v.ExpiresAt }).(pulumi.IntOutput)
}

// The suitable name for saving the file to a filesystem.
func (o FileOutput) Filename() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Filename }).(pulumi.StringOutput)
}

// Optional parameters that automatically create a file link for the newly created file.
func (o FileOutput) LinkData() FileLinkDataPtrOutput {
	return o.ApplyT(func(v *File) FileLinkDataPtrOutput { return v.LinkData }).(FileLinkDataPtrOutput)
}

func (o FileOutput) Links() FileLinkArrayOutput {
	return o.ApplyT(func(v *File) FileLinkArrayOutput { return v.Links }).(FileLinkArrayOutput)
}

// String representing the object’s type. Objects of the same type share the same value.
func (o FileOutput) Object() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Object }).(pulumi.StringOutput)
}

// The purpose of the uploaded file.
func (o FileOutput) Purpose() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Purpose }).(pulumi.StringOutput)
}

// The size of the file object in bytes.
func (o FileOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *File) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// The returned file type (for example, csv, pdf, jpg, or png).
func (o FileOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Use your live secret API key to download the file from this URL.
func (o FileOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *File) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type FileArrayOutput struct{ *pulumi.OutputState }

func (FileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*File)(nil)).Elem()
}

func (o FileArrayOutput) ToFileArrayOutput() FileArrayOutput {
	return o
}

func (o FileArrayOutput) ToFileArrayOutputWithContext(ctx context.Context) FileArrayOutput {
	return o
}

func (o FileArrayOutput) Index(i pulumi.IntInput) FileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *File {
		return vs[0].([]*File)[vs[1].(int)]
	}).(FileOutput)
}

type FileMapOutput struct{ *pulumi.OutputState }

func (FileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*File)(nil)).Elem()
}

func (o FileMapOutput) ToFileMapOutput() FileMapOutput {
	return o
}

func (o FileMapOutput) ToFileMapOutputWithContext(ctx context.Context) FileMapOutput {
	return o
}

func (o FileMapOutput) MapIndex(k pulumi.StringInput) FileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *File {
		return vs[0].(map[string]*File)[vs[1].(string)]
	}).(FileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileInput)(nil)).Elem(), &File{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileArrayInput)(nil)).Elem(), FileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileMapInput)(nil)).Elem(), FileMap{})
	pulumi.RegisterOutputType(FileOutput{})
	pulumi.RegisterOutputType(FileArrayOutput{})
	pulumi.RegisterOutputType(FileMapOutput{})
}
