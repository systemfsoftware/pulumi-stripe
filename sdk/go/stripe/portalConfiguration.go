// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package stripe

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/systemfsoftware/pulumi-stripe/sdk/go/stripe/internal"
)

type PortalConfiguration struct {
	pulumi.CustomResourceState

	// Whether the configuration is active and can be used to create portal sessions.
	Active pulumi.BoolPtrOutput `pulumi:"active"`
	// The business information shown to customers in the portal.
	BusinessProfile PortalConfigurationBusinessProfileOutput `pulumi:"businessProfile"`
	// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
	// overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrOutput `pulumi:"defaultReturnUrl"`
	// Information about the features available in the portal.
	Features PortalConfigurationFeaturesOutput `pulumi:"features"`
	// Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
	// sessions will use this configuration unless it is overriden when creating the session.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// The hosted login page for this configuration.
	LoginPage PortalConfigurationLoginPageOutput `pulumi:"loginPage"`
	// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
	// object in a structured format.
	Metadata pulumi.StringMapOutput `pulumi:"metadata"`
}

// NewPortalConfiguration registers a new resource with the given unique name, arguments, and options.
func NewPortalConfiguration(ctx *pulumi.Context,
	name string, args *PortalConfigurationArgs, opts ...pulumi.ResourceOption) (*PortalConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BusinessProfile == nil {
		return nil, errors.New("invalid value for required argument 'BusinessProfile'")
	}
	if args.Features == nil {
		return nil, errors.New("invalid value for required argument 'Features'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PortalConfiguration
	err := ctx.RegisterResource("stripe:index/portalConfiguration:PortalConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPortalConfiguration gets an existing PortalConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPortalConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PortalConfigurationState, opts ...pulumi.ResourceOption) (*PortalConfiguration, error) {
	var resource PortalConfiguration
	err := ctx.ReadResource("stripe:index/portalConfiguration:PortalConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PortalConfiguration resources.
type portalConfigurationState struct {
	// Whether the configuration is active and can be used to create portal sessions.
	Active *bool `pulumi:"active"`
	// The business information shown to customers in the portal.
	BusinessProfile *PortalConfigurationBusinessProfile `pulumi:"businessProfile"`
	// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
	// overriden when creating the session.
	DefaultReturnUrl *string `pulumi:"defaultReturnUrl"`
	// Information about the features available in the portal.
	Features *PortalConfigurationFeatures `pulumi:"features"`
	// Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
	// sessions will use this configuration unless it is overriden when creating the session.
	IsDefault *bool `pulumi:"isDefault"`
	// The hosted login page for this configuration.
	LoginPage *PortalConfigurationLoginPage `pulumi:"loginPage"`
	// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
	// object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
}

type PortalConfigurationState struct {
	// Whether the configuration is active and can be used to create portal sessions.
	Active pulumi.BoolPtrInput
	// The business information shown to customers in the portal.
	BusinessProfile PortalConfigurationBusinessProfilePtrInput
	// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
	// overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrInput
	// Information about the features available in the portal.
	Features PortalConfigurationFeaturesPtrInput
	// Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
	// sessions will use this configuration unless it is overriden when creating the session.
	IsDefault pulumi.BoolPtrInput
	// The hosted login page for this configuration.
	LoginPage PortalConfigurationLoginPagePtrInput
	// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
	// object in a structured format.
	Metadata pulumi.StringMapInput
}

func (PortalConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*portalConfigurationState)(nil)).Elem()
}

type portalConfigurationArgs struct {
	// Whether the configuration is active and can be used to create portal sessions.
	Active *bool `pulumi:"active"`
	// The business information shown to customers in the portal.
	BusinessProfile PortalConfigurationBusinessProfile `pulumi:"businessProfile"`
	// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
	// overriden when creating the session.
	DefaultReturnUrl *string `pulumi:"defaultReturnUrl"`
	// Information about the features available in the portal.
	Features PortalConfigurationFeatures `pulumi:"features"`
	// The hosted login page for this configuration.
	LoginPage *PortalConfigurationLoginPage `pulumi:"loginPage"`
	// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
	// object in a structured format.
	Metadata map[string]string `pulumi:"metadata"`
}

// The set of arguments for constructing a PortalConfiguration resource.
type PortalConfigurationArgs struct {
	// Whether the configuration is active and can be used to create portal sessions.
	Active pulumi.BoolPtrInput
	// The business information shown to customers in the portal.
	BusinessProfile PortalConfigurationBusinessProfileInput
	// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
	// overriden when creating the session.
	DefaultReturnUrl pulumi.StringPtrInput
	// Information about the features available in the portal.
	Features PortalConfigurationFeaturesInput
	// The hosted login page for this configuration.
	LoginPage PortalConfigurationLoginPagePtrInput
	// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
	// object in a structured format.
	Metadata pulumi.StringMapInput
}

func (PortalConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*portalConfigurationArgs)(nil)).Elem()
}

type PortalConfigurationInput interface {
	pulumi.Input

	ToPortalConfigurationOutput() PortalConfigurationOutput
	ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput
}

func (*PortalConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalConfiguration)(nil)).Elem()
}

func (i *PortalConfiguration) ToPortalConfigurationOutput() PortalConfigurationOutput {
	return i.ToPortalConfigurationOutputWithContext(context.Background())
}

func (i *PortalConfiguration) ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationOutput)
}

// PortalConfigurationArrayInput is an input type that accepts PortalConfigurationArray and PortalConfigurationArrayOutput values.
// You can construct a concrete instance of `PortalConfigurationArrayInput` via:
//
//	PortalConfigurationArray{ PortalConfigurationArgs{...} }
type PortalConfigurationArrayInput interface {
	pulumi.Input

	ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput
	ToPortalConfigurationArrayOutputWithContext(context.Context) PortalConfigurationArrayOutput
}

type PortalConfigurationArray []PortalConfigurationInput

func (PortalConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalConfiguration)(nil)).Elem()
}

func (i PortalConfigurationArray) ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput {
	return i.ToPortalConfigurationArrayOutputWithContext(context.Background())
}

func (i PortalConfigurationArray) ToPortalConfigurationArrayOutputWithContext(ctx context.Context) PortalConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationArrayOutput)
}

// PortalConfigurationMapInput is an input type that accepts PortalConfigurationMap and PortalConfigurationMapOutput values.
// You can construct a concrete instance of `PortalConfigurationMapInput` via:
//
//	PortalConfigurationMap{ "key": PortalConfigurationArgs{...} }
type PortalConfigurationMapInput interface {
	pulumi.Input

	ToPortalConfigurationMapOutput() PortalConfigurationMapOutput
	ToPortalConfigurationMapOutputWithContext(context.Context) PortalConfigurationMapOutput
}

type PortalConfigurationMap map[string]PortalConfigurationInput

func (PortalConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalConfiguration)(nil)).Elem()
}

func (i PortalConfigurationMap) ToPortalConfigurationMapOutput() PortalConfigurationMapOutput {
	return i.ToPortalConfigurationMapOutputWithContext(context.Background())
}

func (i PortalConfigurationMap) ToPortalConfigurationMapOutputWithContext(ctx context.Context) PortalConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PortalConfigurationMapOutput)
}

type PortalConfigurationOutput struct{ *pulumi.OutputState }

func (PortalConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationOutput) ToPortalConfigurationOutput() PortalConfigurationOutput {
	return o
}

func (o PortalConfigurationOutput) ToPortalConfigurationOutputWithContext(ctx context.Context) PortalConfigurationOutput {
	return o
}

// Whether the configuration is active and can be used to create portal sessions.
func (o PortalConfigurationOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.BoolPtrOutput { return v.Active }).(pulumi.BoolPtrOutput)
}

// The business information shown to customers in the portal.
func (o PortalConfigurationOutput) BusinessProfile() PortalConfigurationBusinessProfileOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationBusinessProfileOutput { return v.BusinessProfile }).(PortalConfigurationBusinessProfileOutput)
}

// The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
// overriden when creating the session.
func (o PortalConfigurationOutput) DefaultReturnUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.StringPtrOutput { return v.DefaultReturnUrl }).(pulumi.StringPtrOutput)
}

// Information about the features available in the portal.
func (o PortalConfigurationOutput) Features() PortalConfigurationFeaturesOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationFeaturesOutput { return v.Features }).(PortalConfigurationFeaturesOutput)
}

// Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
// sessions will use this configuration unless it is overriden when creating the session.
func (o PortalConfigurationOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// The hosted login page for this configuration.
func (o PortalConfigurationOutput) LoginPage() PortalConfigurationLoginPageOutput {
	return o.ApplyT(func(v *PortalConfiguration) PortalConfigurationLoginPageOutput { return v.LoginPage }).(PortalConfigurationLoginPageOutput)
}

// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
// object in a structured format.
func (o PortalConfigurationOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PortalConfiguration) pulumi.StringMapOutput { return v.Metadata }).(pulumi.StringMapOutput)
}

type PortalConfigurationArrayOutput struct{ *pulumi.OutputState }

func (PortalConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationArrayOutput) ToPortalConfigurationArrayOutput() PortalConfigurationArrayOutput {
	return o
}

func (o PortalConfigurationArrayOutput) ToPortalConfigurationArrayOutputWithContext(ctx context.Context) PortalConfigurationArrayOutput {
	return o
}

func (o PortalConfigurationArrayOutput) Index(i pulumi.IntInput) PortalConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PortalConfiguration {
		return vs[0].([]*PortalConfiguration)[vs[1].(int)]
	}).(PortalConfigurationOutput)
}

type PortalConfigurationMapOutput struct{ *pulumi.OutputState }

func (PortalConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PortalConfiguration)(nil)).Elem()
}

func (o PortalConfigurationMapOutput) ToPortalConfigurationMapOutput() PortalConfigurationMapOutput {
	return o
}

func (o PortalConfigurationMapOutput) ToPortalConfigurationMapOutputWithContext(ctx context.Context) PortalConfigurationMapOutput {
	return o
}

func (o PortalConfigurationMapOutput) MapIndex(k pulumi.StringInput) PortalConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PortalConfiguration {
		return vs[0].(map[string]*PortalConfiguration)[vs[1].(string)]
	}).(PortalConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationInput)(nil)).Elem(), &PortalConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationArrayInput)(nil)).Elem(), PortalConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PortalConfigurationMapInput)(nil)).Elem(), PortalConfigurationMap{})
	pulumi.RegisterOutputType(PortalConfigurationOutput{})
	pulumi.RegisterOutputType(PortalConfigurationArrayOutput{})
	pulumi.RegisterOutputType(PortalConfigurationMapOutput{})
}
