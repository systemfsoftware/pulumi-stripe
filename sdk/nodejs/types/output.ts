// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as enums from "../types/enums";

export interface FileLink {
    /**
     * Time at which the object was created. Measured in seconds since the Unix epoch.
     */
    created: number;
    /**
     * Returns if the link is already expired.
     */
    expired: boolean;
    /**
     * Time that the link expires
     */
    expiresAt: number;
    /**
     * Unique identifier for the object.
     */
    id: string;
    /**
     * Has the value true if the object exists in live mode or the value false if the object exists in test mode.
     */
    livemode: boolean;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     */
    metadata?: {[key: string]: string};
    /**
     * String representing the object’s type. Objects of the same type share the same value.
     */
    object: string;
    /**
     * The publicly accessible URL to download the file.
     */
    url: string;
}

export interface FileLinkData {
    /**
     * Set this to true to create a file link for the newly created file. Creating a link is only possible when the file’s purpose is one of the following: business_icon, business_logo, customer_signature, dispute_evidence, pci_document, tax_document_user_upload, or terminal_reader_splashscreen.
     */
    create: boolean;
    /**
     * The link isn’t available after this future timestamp.
     */
    expiresAt?: number;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
     */
    metadata?: {[key: string]: string};
}

export interface PortalConfigurationBusinessProfile {
    /**
     * The messaging shown to customers in the portal.
     */
    headline?: string;
    /**
     * A link to the business's publicly available privacy policy.
     */
    privacyPolicyUrl?: string;
    /**
     * A link to the business's publicly available terms of service.
     */
    termsOfServiceUrl?: string;
}

export interface PortalConfigurationFeatures {
    /**
     * Information about updating the customer details in the portal.
     */
    customerUpdate: outputs.PortalConfigurationFeaturesCustomerUpdate;
    /**
     * Information about showing the billing history in the portal.
     */
    invoiceHistory: outputs.PortalConfigurationFeaturesInvoiceHistory;
    /**
     * Information about updating payment methods in the portal.
     */
    paymentMethodUpdate: outputs.PortalConfigurationFeaturesPaymentMethodUpdate;
    /**
     * Information about canceling subscriptions in the portal.
     */
    subscriptionCancel: outputs.PortalConfigurationFeaturesSubscriptionCancel;
    /**
     * Information about pausing subscriptions in the portal.
     */
    subscriptionPauses: outputs.PortalConfigurationFeaturesSubscriptionPause[];
    /**
     * Information about updating subscriptions in the portal.
     */
    subscriptionUpdates: outputs.PortalConfigurationFeaturesSubscriptionUpdate[];
}

export interface PortalConfigurationFeaturesCustomerUpdate {
    /**
     * The types of customer updates that are supported. When empty, customers are not updatable.
     */
    allowedUpdates?: string[];
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
}

export interface PortalConfigurationFeaturesInvoiceHistory {
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
}

export interface PortalConfigurationFeaturesPaymentMethodUpdate {
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
}

export interface PortalConfigurationFeaturesSubscriptionCancel {
    /**
     * Whether the cancellation reasons will be collected in the portal and which options are exposed to the customer
     */
    cancellationReason?: outputs.PortalConfigurationFeaturesSubscriptionCancelCancellationReason;
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
    /**
     * Whether to cancel subscriptions immediately or at the end of the billing period.
     */
    mode?: string;
    /**
     * Whether to create prorations when canceling subscriptions.
     */
    prorationBehavior?: string;
}

export interface PortalConfigurationFeaturesSubscriptionCancelCancellationReason {
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
    /**
     * Which cancellation reasons will be given as options to the customer.
     */
    options: string[];
}

export interface PortalConfigurationFeaturesSubscriptionPause {
    /**
     * Whether the feature is enabled.
     */
    enabled?: boolean;
}

export interface PortalConfigurationFeaturesSubscriptionUpdate {
    /**
     * The types of subscription updates that are supported. When empty, subscriptions are not updateable.
     */
    defaultAllowedUpdates: string[];
    /**
     * Whether the feature is enabled.
     */
    enabled: boolean;
    /**
     * The list of products that support subscription updates.
     */
    products: outputs.PortalConfigurationFeaturesSubscriptionUpdateProduct[];
    /**
     * Determines how to handle prorations resulting from subscription updates
     */
    prorationBehavior?: string;
}

export interface PortalConfigurationFeaturesSubscriptionUpdateProduct {
    /**
     * The list of price IDs for the product that a subscription can be updated to.
     */
    prices: string[];
    /**
     * The product id.
     */
    product: string;
}

export interface PortalConfigurationLoginPage {
    /**
     * Set to true to generate a shareable URL login_page.url that will take your customers to a hosted login page for the customer portal.
     */
    enabled?: boolean;
    /**
     * A shareable URL to the hosted portal login page. Your customers will be able to log in with their email and receive a link to their customer portal.
     */
    url: string;
}

export interface PriceCurrencyOption {
    /**
     * Each currency must be a three-letter ISO currency code and a supported currency
     */
    currency: string;
    /**
     * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links
     */
    customUnitAmount?: outputs.PriceCurrencyOptionCustomUnitAmount;
    /**
     * Only required if a default tax behavior was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or unspecified. Once specified as either inclusive or exclusive, it cannot be changed.
     */
    taxBehavior?: string;
    /**
     * Each element represents a pricing tier. This parameter requires billingScheme to be set to tiered. See also the documentation for billing_scheme.
     */
    tiers?: outputs.PriceCurrencyOptionTier[];
    /**
     * A positive integer in cents (or -1 for a free price) representing how much to charge.
     */
    unitAmount?: number;
    /**
     * Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unitAmount and unitAmountDecimal can be set.
     */
    unitAmountDecimal?: number;
}

export interface PriceCurrencyOptionCustomUnitAmount {
    /**
     * Pass in true to enable custom_unit_amount, otherwise omit custom_unit_amount
     */
    enabled: boolean;
    /**
     * The maximum unit amount the customer can specify for this item.
     */
    maximum?: number;
    /**
     * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
     */
    minimum?: number;
    /**
     * The starting unit amount which can be updated by the customer.
     */
    preset?: number;
}

export interface PriceCurrencyOptionTier {
    /**
     * The flat billing amount for an entire tier, regardless of the number of units in the tier.
     */
    flatAmount?: number;
    /**
     * Same as flat_amount, but accepts a decimal value representing an integer in the minor units of the currency. Only one of flatAmount and flatAmountDecimal can be set.
     */
    flatAmountDecimal?: number;
    /**
     * The per unit billing amount for each individual unit for which this tier applies.
     */
    unitAmount?: number;
    /**
     * Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unitAmount and unitAmountDecimal can be set.
     */
    unitAmountDecimal?: number;
    /**
     * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use -1 to define a fallback tier.
     */
    upTo?: number;
}

export interface PriceRecurring {
    /**
     * Specifies a usage aggregation strategy for prices of usage_type=metered. Allowed values are sum for summing up all usage during a period, lastDuringPeriod for using the last usage record reported within a period, lastEver for using the last usage record ever (across period bounds) or max which uses the usage record with the maximum reported usage during a period.
     */
    aggregateUsage?: string;
    /**
     * Specifies billing frequency. Either day, week, month or year.
     */
    interval: string;
    /**
     * The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
     */
    intervalCount?: number;
    /**
     * Configures how the quantity per period should be determined. Can be either metered or licensed. licensed automatically bills the quantity set when adding it to a subscription. metered aggregates the total usage based on usage records. Defaults to licensed.
     */
    usageType?: string;
}

export interface PriceTier {
    /**
     * The flat billing amount for an entire tier, regardless of the number of units in the tier.
     */
    flatAmount?: number;
    /**
     * Same as flat_amount, but accepts a decimal value representing an integer in the minor units of the currency. Only one of flatAmount and flatAmountDecimal can be set.
     */
    flatAmountDecimal?: number;
    /**
     * The per unit billing amount for each individual unit for which this tier applies.
     */
    unitAmount?: number;
    /**
     * Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unitAmount and unitAmountDecimal can be set.
     */
    unitAmountDecimal?: number;
    /**
     * Specifies the upper bound of this tier. The lower bound of a tier is the upper bound of the previous tier adding one. Use -1 to define a fallback tier.
     */
    upTo?: number;
}

export interface PriceTransformQuantity {
    /**
     * Divide usage by this number.
     */
    divideBy: number;
    /**
     * After division, either round the result up or down
     */
    round: string;
}

export interface PromotionCodeRestrictions {
    /**
     * A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
     */
    firstTimeTransaction: boolean;
    /**
     * Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
     */
    minimumAmount: number;
    /**
     * Three-letter ISO code for minimum_amount
     */
    minimumAmountCurrency: string;
}

export interface ShippingRateDeliveryEstimate {
    maximum?: outputs.ShippingRateDeliveryEstimateMaximum;
    minimum?: outputs.ShippingRateDeliveryEstimateMinimum;
}

export interface ShippingRateDeliveryEstimateMaximum {
    /**
     * The upper bound of the estimated range. If empty, represents no lower bound.
     */
    unit: string;
    /**
     * Must be greater than 0.
     */
    value: number;
}

export interface ShippingRateDeliveryEstimateMinimum {
    /**
     * The lower bound of the estimated range. If empty, represents no lower bound.
     */
    unit: string;
    /**
     * Must be greater than 0.
     */
    value: number;
}

export interface ShippingRateFixedAmount {
    /**
     * A non-negative integer in cents representing how much to charge.
     */
    amount: number;
    /**
     * Three-letter ISO currency code, in lowercase. Must be a supported currency.
     */
    currency: string;
    /**
     * Shipping rates defined in each available currency option. Each key must be a three-letter ISO currency code and a supported currency. For example, to get your shipping rate in eur, fetch the value of the eur key in currency_options. This field is not included by default. To include it in the response, expand the currencyOptions field.
     */
    currencyOptions?: outputs.ShippingRateFixedAmountCurrencyOption[];
}

export interface ShippingRateFixedAmountCurrencyOption {
    /**
     * A non-negative integer in cents representing how much to charge.
     */
    amount: number;
    /**
     * Three-letter ISO currency code, in lowercase. Must be a supported currency.
     */
    currency: string;
    /**
     * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or unspecified.
     */
    taxBehavior?: string;
}

