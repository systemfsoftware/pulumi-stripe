// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as enums from "./types/enums";
import * as utilities from "./utilities";

export class PortalConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing PortalConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PortalConfigurationState, opts?: pulumi.CustomResourceOptions): PortalConfiguration {
        return new PortalConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'stripe:index/portalConfiguration:PortalConfiguration';

    /**
     * Returns true if the given object is an instance of PortalConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PortalConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PortalConfiguration.__pulumiType;
    }

    /**
     * Whether the configuration is active and can be used to create portal sessions.
     */
    public readonly active!: pulumi.Output<boolean | undefined>;
    /**
     * The business information shown to customers in the portal.
     */
    public readonly businessProfile!: pulumi.Output<outputs.PortalConfigurationBusinessProfile>;
    /**
     * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
     * overriden when creating the session.
     */
    public readonly defaultReturnUrl!: pulumi.Output<string | undefined>;
    /**
     * Information about the features available in the portal.
     */
    public readonly features!: pulumi.Output<outputs.PortalConfigurationFeatures>;
    /**
     * Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
     * sessions will use this configuration unless it is overriden when creating the session.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * The hosted login page for this configuration.
     */
    public readonly loginPage!: pulumi.Output<outputs.PortalConfigurationLoginPage>;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
     * object in a structured format.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a PortalConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PortalConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PortalConfigurationArgs | PortalConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PortalConfigurationState | undefined;
            resourceInputs["active"] = state ? state.active : undefined;
            resourceInputs["businessProfile"] = state ? state.businessProfile : undefined;
            resourceInputs["defaultReturnUrl"] = state ? state.defaultReturnUrl : undefined;
            resourceInputs["features"] = state ? state.features : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["loginPage"] = state ? state.loginPage : undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
        } else {
            const args = argsOrState as PortalConfigurationArgs | undefined;
            if ((!args || args.businessProfile === undefined) && !opts.urn) {
                throw new Error("Missing required property 'businessProfile'");
            }
            if ((!args || args.features === undefined) && !opts.urn) {
                throw new Error("Missing required property 'features'");
            }
            resourceInputs["active"] = args ? args.active : undefined;
            resourceInputs["businessProfile"] = args ? args.businessProfile : undefined;
            resourceInputs["defaultReturnUrl"] = args ? args.defaultReturnUrl : undefined;
            resourceInputs["features"] = args ? args.features : undefined;
            resourceInputs["loginPage"] = args ? args.loginPage : undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["isDefault"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PortalConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PortalConfiguration resources.
 */
export interface PortalConfigurationState {
    /**
     * Whether the configuration is active and can be used to create portal sessions.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The business information shown to customers in the portal.
     */
    businessProfile?: pulumi.Input<inputs.PortalConfigurationBusinessProfile>;
    /**
     * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
     * overriden when creating the session.
     */
    defaultReturnUrl?: pulumi.Input<string>;
    /**
     * Information about the features available in the portal.
     */
    features?: pulumi.Input<inputs.PortalConfigurationFeatures>;
    /**
     * Whether the configuration is the default. If true, this configuration can be managed in the Dashboard and portal
     * sessions will use this configuration unless it is overriden when creating the session.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The hosted login page for this configuration.
     */
    loginPage?: pulumi.Input<inputs.PortalConfigurationLoginPage>;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
     * object in a structured format.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a PortalConfiguration resource.
 */
export interface PortalConfigurationArgs {
    /**
     * Whether the configuration is active and can be used to create portal sessions.
     */
    active?: pulumi.Input<boolean>;
    /**
     * The business information shown to customers in the portal.
     */
    businessProfile: pulumi.Input<inputs.PortalConfigurationBusinessProfile>;
    /**
     * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be
     * overriden when creating the session.
     */
    defaultReturnUrl?: pulumi.Input<string>;
    /**
     * Information about the features available in the portal.
     */
    features: pulumi.Input<inputs.PortalConfigurationFeatures>;
    /**
     * The hosted login page for this configuration.
     */
    loginPage?: pulumi.Input<inputs.PortalConfigurationLoginPage>;
    /**
     * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
     * object in a structured format.
     */
    metadata?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
