// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    [StripeResourceType("stripe:index/taxRate:TaxRate")]
    public partial class TaxRate : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new
        /// applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Two-letter country code (ISO 3166-1 alpha-2).
        /// </summary>
        [Output("country")]
        public Output<string?> Country { get; private set; } = null!;

        /// <summary>
        /// Time at which the object was created. Measured in seconds since the Unix epoch.
        /// </summary>
        [Output("created")]
        public Output<int> Created { get; private set; } = null!;

        /// <summary>
        /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The display name of the tax rate, which will be shown to users.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// This specifies if the tax rate is inclusive or exclusive.
        /// </summary>
        [Output("inclusive")]
        public Output<bool> Inclusive { get; private set; } = null!;

        /// <summary>
        /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes.It also appears on your
        /// customer’s invoice.
        /// </summary>
        [Output("jurisdiction")]
        public Output<string?> Jurisdiction { get; private set; } = null!;

        /// <summary>
        /// Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        /// </summary>
        [Output("livemode")]
        public Output<bool> Livemode { get; private set; } = null!;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by
        /// posting an empty value to metadata.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        [Output("object")]
        public Output<string> Object { get; private set; } = null!;

        /// <summary>
        /// This represents the tax rate percent out of 100.
        /// </summary>
        [Output("percentage")]
        public Output<double> Percentage { get; private set; } = null!;

        /// <summary>
        /// ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        /// </summary>
        [Output("state")]
        public Output<string?> State { get; private set; } = null!;

        /// <summary>
        /// The high-level tax type, such as vat or sales_tax.
        /// </summary>
        [Output("taxType")]
        public Output<string?> TaxType { get; private set; } = null!;


        /// <summary>
        /// Create a TaxRate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TaxRate(string name, TaxRateArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/taxRate:TaxRate", name, args ?? new TaxRateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TaxRate(string name, Input<string> id, TaxRateState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/taxRate:TaxRate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TaxRate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TaxRate Get(string name, Input<string> id, TaxRateState? state = null, CustomResourceOptions? options = null)
        {
            return new TaxRate(name, id, state, options);
        }
    }

    public sealed class TaxRateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new
        /// applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Two-letter country code (ISO 3166-1 alpha-2).
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the tax rate, which will be shown to users.
        /// </summary>
        [Input("displayName", required: true)]
        public Input<string> DisplayName { get; set; } = null!;

        /// <summary>
        /// This specifies if the tax rate is inclusive or exclusive.
        /// </summary>
        [Input("inclusive", required: true)]
        public Input<bool> Inclusive { get; set; } = null!;

        /// <summary>
        /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes.It also appears on your
        /// customer’s invoice.
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by
        /// posting an empty value to metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// This represents the tax rate percent out of 100.
        /// </summary>
        [Input("percentage", required: true)]
        public Input<double> Percentage { get; set; } = null!;

        /// <summary>
        /// ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The high-level tax type, such as vat or sales_tax.
        /// </summary>
        [Input("taxType")]
        public Input<string>? TaxType { get; set; }

        public TaxRateArgs()
        {
        }
        public static new TaxRateArgs Empty => new TaxRateArgs();
    }

    public sealed class TaxRateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Flag determining whether the tax rate is active or inactive (archived). Inactive tax rates cannot be used with new
        /// applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Two-letter country code (ISO 3166-1 alpha-2).
        /// </summary>
        [Input("country")]
        public Input<string>? Country { get; set; }

        /// <summary>
        /// Time at which the object was created. Measured in seconds since the Unix epoch.
        /// </summary>
        [Input("created")]
        public Input<int>? Created { get; set; }

        /// <summary>
        /// An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The display name of the tax rate, which will be shown to users.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// This specifies if the tax rate is inclusive or exclusive.
        /// </summary>
        [Input("inclusive")]
        public Input<bool>? Inclusive { get; set; }

        /// <summary>
        /// The jurisdiction for the tax rate. You can use this label field for tax reporting purposes.It also appears on your
        /// customer’s invoice.
        /// </summary>
        [Input("jurisdiction")]
        public Input<string>? Jurisdiction { get; set; }

        /// <summary>
        /// Has the value true if the object exists in live mode or the value false if the object exists in test mode.
        /// </summary>
        [Input("livemode")]
        public Input<bool>? Livemode { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by
        /// posting an empty value to metadata.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// String representing the object’s type. Objects of the same type share the same value.
        /// </summary>
        [Input("object")]
        public Input<string>? Object { get; set; }

        /// <summary>
        /// This represents the tax rate percent out of 100.
        /// </summary>
        [Input("percentage")]
        public Input<double>? Percentage { get; set; }

        /// <summary>
        /// ISO 3166-2 subdivision code, without country prefix. For example, “NY” for New York, United States.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The high-level tax type, such as vat or sales_tax.
        /// </summary>
        [Input("taxType")]
        public Input<string>? TaxType { get; set; }

        public TaxRateState()
        {
        }
        public static new TaxRateState Empty => new TaxRateState();
    }
}
