// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    [StripeResourceType("stripe:index/product:Product")]
    public partial class Product : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the product is currently available for purchase. Defaults to true.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form
        /// explanation of the product being sold for your own rendering purposes.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        /// </summary>
        [Output("images")]
        public Output<ImmutableArray<string>> Images { get; private set; } = null!;

        /// <summary>
        /// A list of up to 15 marketing features for this product. These are displayed in pricing tables.
        /// </summary>
        [Output("marketingFeatures")]
        public Output<ImmutableArray<string>> MarketingFeatures { get; private set; } = null!;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name
        /// will show up on associated invoice line item descriptions.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The dimensions of this product for shipping purposes.
        /// </summary>
        [Output("packageDimensions")]
        public Output<ImmutableDictionary<string, double>?> PackageDimensions { get; private set; } = null!;

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        [Output("productId")]
        public Output<string> ProductId { get; private set; } = null!;

        /// <summary>
        /// Whether this product is shipped (i.e., physical goods).
        /// </summary>
        [Output("shippable")]
        public Output<bool?> Shippable { get; private set; } = null!;

        /// <summary>
        /// An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this
        /// information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement
        /// description may not include &lt;, &gt;, \, ", ’ characters, and will appear on your customer’s statement in capital
        /// letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        /// </summary>
        [Output("statementDescriptor")]
        public Output<string?> StatementDescriptor { get; private set; } = null!;

        /// <summary>
        /// A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        /// </summary>
        [Output("taxCode")]
        public Output<string?> TaxCode { get; private set; } = null!;

        /// <summary>
        /// A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will
        /// be included in associated invoice line item descriptions.
        /// </summary>
        [Output("unitLabel")]
        public Output<string?> UnitLabel { get; private set; } = null!;

        /// <summary>
        /// A URL of a publicly-accessible webpage for this product.
        /// </summary>
        [Output("url")]
        public Output<string?> Url { get; private set; } = null!;


        /// <summary>
        /// Create a Product resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Product(string name, ProductArgs? args = null, CustomResourceOptions? options = null)
            : base("stripe:index/product:Product", name, args ?? new ProductArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Product(string name, Input<string> id, ProductState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/product:Product", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Product resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Product Get(string name, Input<string> id, ProductState? state = null, CustomResourceOptions? options = null)
        {
            return new Product(name, id, state, options);
        }
    }

    public sealed class ProductArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the product is currently available for purchase. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form
        /// explanation of the product being sold for your own rendering purposes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        [Input("marketingFeatures")]
        private InputList<string>? _marketingFeatures;

        /// <summary>
        /// A list of up to 15 marketing features for this product. These are displayed in pricing tables.
        /// </summary>
        public InputList<string> MarketingFeatures
        {
            get => _marketingFeatures ?? (_marketingFeatures = new InputList<string>());
            set => _marketingFeatures = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name
        /// will show up on associated invoice line item descriptions.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("packageDimensions")]
        private InputMap<double>? _packageDimensions;

        /// <summary>
        /// The dimensions of this product for shipping purposes.
        /// </summary>
        public InputMap<double> PackageDimensions
        {
            get => _packageDimensions ?? (_packageDimensions = new InputMap<double>());
            set => _packageDimensions = value;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// Whether this product is shipped (i.e., physical goods).
        /// </summary>
        [Input("shippable")]
        public Input<bool>? Shippable { get; set; }

        /// <summary>
        /// An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this
        /// information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement
        /// description may not include &lt;, &gt;, \, ", ’ characters, and will appear on your customer’s statement in capital
        /// letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        /// </summary>
        [Input("statementDescriptor")]
        public Input<string>? StatementDescriptor { get; set; }

        /// <summary>
        /// A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        /// </summary>
        [Input("taxCode")]
        public Input<string>? TaxCode { get; set; }

        /// <summary>
        /// A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will
        /// be included in associated invoice line item descriptions.
        /// </summary>
        [Input("unitLabel")]
        public Input<string>? UnitLabel { get; set; }

        /// <summary>
        /// A URL of a publicly-accessible webpage for this product.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ProductArgs()
        {
        }
        public static new ProductArgs Empty => new ProductArgs();
    }

    public sealed class ProductState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the product is currently available for purchase. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// The product’s description, meant to be displayable to the customer. Use this field to optionally store a long form
        /// explanation of the product being sold for your own rendering purposes.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("images")]
        private InputList<string>? _images;

        /// <summary>
        /// A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
        /// </summary>
        public InputList<string> Images
        {
            get => _images ?? (_images = new InputList<string>());
            set => _images = value;
        }

        [Input("marketingFeatures")]
        private InputList<string>? _marketingFeatures;

        /// <summary>
        /// A list of up to 15 marketing features for this product. These are displayed in pricing tables.
        /// </summary>
        public InputList<string> MarketingFeatures
        {
            get => _marketingFeatures ?? (_marketingFeatures = new InputList<string>());
            set => _marketingFeatures = value;
        }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The product’s name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name
        /// will show up on associated invoice line item descriptions.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("packageDimensions")]
        private InputMap<double>? _packageDimensions;

        /// <summary>
        /// The dimensions of this product for shipping purposes.
        /// </summary>
        public InputMap<double> PackageDimensions
        {
            get => _packageDimensions ?? (_packageDimensions = new InputMap<double>());
            set => _packageDimensions = value;
        }

        /// <summary>
        /// Unique identifier for the object.
        /// </summary>
        [Input("productId")]
        public Input<string>? ProductId { get; set; }

        /// <summary>
        /// Whether this product is shipped (i.e., physical goods).
        /// </summary>
        [Input("shippable")]
        public Input<bool>? Shippable { get; set; }

        /// <summary>
        /// An arbitrary string to be displayed on your customer’s credit card or bank statement. While most banks display this
        /// information consistently, some may display it incorrectly or not at all. This may be up to 22 characters. The statement
        /// description may not include &lt;, &gt;, \, ", ’ characters, and will appear on your customer’s statement in capital
        /// letters. Non-ASCII characters are automatically stripped. It must contain at least one letter.
        /// </summary>
        [Input("statementDescriptor")]
        public Input<string>? StatementDescriptor { get; set; }

        /// <summary>
        /// A tax code ID. Supported values are listed in the TaxCode resource and at https://stripe.com/docs/tax/tax-categories.
        /// </summary>
        [Input("taxCode")]
        public Input<string>? TaxCode { get; set; }

        /// <summary>
        /// A label that represents units of this product in Stripe and on customers’ receipts and invoices. When set, this will
        /// be included in associated invoice line item descriptions.
        /// </summary>
        [Input("unitLabel")]
        public Input<string>? UnitLabel { get; set; }

        /// <summary>
        /// A URL of a publicly-accessible webpage for this product.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public ProductState()
        {
        }
        public static new ProductState Empty => new ProductState();
    }
}
