// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Stripe
{
    [StripeResourceType("stripe:index/price:Price")]
    public partial class Price : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether the price can be used for new purchases. Defaults to true.
        /// </summary>
        [Output("active")]
        public Output<bool?> Active { get; private set; } = null!;

        /// <summary>
        /// Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount
        /// (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with
        /// usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit
        /// pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
        /// </summary>
        [Output("billingScheme")]
        public Output<string> BillingScheme { get; private set; } = null!;

        /// <summary>
        /// Three-letter ISO currency code, in lowercase.
        /// </summary>
        [Output("currency")]
        public Output<string> Currency { get; private set; } = null!;

        /// <summary>
        /// Prices defined in each available currency option. Each key must be a three-letter ISO currency code and a supported
        /// currency
        /// </summary>
        [Output("currencyOptions")]
        public Output<ImmutableArray<Outputs.PriceCurrencyOption>> CurrencyOptions { get; private set; } = null!;

        /// <summary>
        /// When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment
        /// Links
        /// </summary>
        [Output("customUnitAmount")]
        public Output<Outputs.PriceCustomUnitAmount?> CustomUnitAmount { get; private set; } = null!;

        /// <summary>
        /// A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Output("lookupKey")]
        public Output<string?> LookupKey { get; private set; } = null!;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableDictionary<string, string>?> Metadata { get; private set; } = null!;

        /// <summary>
        /// A brief description of the price, hidden from customers.
        /// </summary>
        [Output("nickname")]
        public Output<string?> Nickname { get; private set; } = null!;

        /// <summary>
        /// The ID of the product that this price will belong to.
        /// </summary>
        [Output("product")]
        public Output<string> Product { get; private set; } = null!;

        /// <summary>
        /// The recurring components of a price such as interval and usage_type.
        /// </summary>
        [Output("recurring")]
        public Output<Outputs.PriceRecurring?> Recurring { get; private set; } = null!;

        /// <summary>
        /// Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified. Once specified as either inclusive or exclusive, it cannot be changed.
        /// </summary>
        [Output("taxBehavior")]
        public Output<string?> TaxBehavior { get; private set; } = null!;

        /// <summary>
        /// Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered. See also the
        /// documentation for billing_scheme.
        /// </summary>
        [Output("tiers")]
        public Output<ImmutableArray<Outputs.PriceTier>> Tiers { get; private set; } = null!;

        /// <summary>
        /// Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a
        /// period determines the per unit price, in graduated tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Output("tiersMode")]
        public Output<string?> TiersMode { get; private set; } = null!;

        /// <summary>
        /// If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
        /// </summary>
        [Output("transferLookupKey")]
        public Output<bool?> TransferLookupKey { get; private set; } = null!;

        /// <summary>
        /// Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with
        /// tiers
        /// </summary>
        [Output("transformQuantity")]
        public Output<Outputs.PriceTransformQuantity?> TransformQuantity { get; private set; } = null!;

        /// <summary>
        /// One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription)
        /// purchase
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// A positive integer in cents (or -1 for a free price) representing how much to charge.
        /// </summary>
        [Output("unitAmount")]
        public Output<int> UnitAmount { get; private set; } = null!;

        /// <summary>
        /// Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unit_amount and
        /// unit_amount_decimal can be set
        /// </summary>
        [Output("unitAmountDecimal")]
        public Output<double> UnitAmountDecimal { get; private set; } = null!;


        /// <summary>
        /// Create a Price resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Price(string name, PriceArgs args, CustomResourceOptions? options = null)
            : base("stripe:index/price:Price", name, args ?? new PriceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Price(string name, Input<string> id, PriceState? state = null, CustomResourceOptions? options = null)
            : base("stripe:index/price:Price", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Price resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Price Get(string name, Input<string> id, PriceState? state = null, CustomResourceOptions? options = null)
        {
            return new Price(name, id, state, options);
        }
    }

    public sealed class PriceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the price can be used for new purchases. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount
        /// (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with
        /// usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit
        /// pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
        /// </summary>
        [Input("billingScheme")]
        public Input<string>? BillingScheme { get; set; }

        /// <summary>
        /// Three-letter ISO currency code, in lowercase.
        /// </summary>
        [Input("currency", required: true)]
        public Input<string> Currency { get; set; } = null!;

        [Input("currencyOptions")]
        private InputList<Inputs.PriceCurrencyOptionArgs>? _currencyOptions;

        /// <summary>
        /// Prices defined in each available currency option. Each key must be a three-letter ISO currency code and a supported
        /// currency
        /// </summary>
        public InputList<Inputs.PriceCurrencyOptionArgs> CurrencyOptions
        {
            get => _currencyOptions ?? (_currencyOptions = new InputList<Inputs.PriceCurrencyOptionArgs>());
            set => _currencyOptions = value;
        }

        /// <summary>
        /// When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment
        /// Links
        /// </summary>
        [Input("customUnitAmount")]
        public Input<Inputs.PriceCustomUnitAmountArgs>? CustomUnitAmount { get; set; }

        /// <summary>
        /// A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Input("lookupKey")]
        public Input<string>? LookupKey { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// A brief description of the price, hidden from customers.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// The ID of the product that this price will belong to.
        /// </summary>
        [Input("product", required: true)]
        public Input<string> Product { get; set; } = null!;

        /// <summary>
        /// The recurring components of a price such as interval and usage_type.
        /// </summary>
        [Input("recurring")]
        public Input<Inputs.PriceRecurringArgs>? Recurring { get; set; }

        /// <summary>
        /// Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified. Once specified as either inclusive or exclusive, it cannot be changed.
        /// </summary>
        [Input("taxBehavior")]
        public Input<string>? TaxBehavior { get; set; }

        [Input("tiers")]
        private InputList<Inputs.PriceTierArgs>? _tiers;

        /// <summary>
        /// Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered. See also the
        /// documentation for billing_scheme.
        /// </summary>
        public InputList<Inputs.PriceTierArgs> Tiers
        {
            get => _tiers ?? (_tiers = new InputList<Inputs.PriceTierArgs>());
            set => _tiers = value;
        }

        /// <summary>
        /// Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a
        /// period determines the per unit price, in graduated tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Input("tiersMode")]
        public Input<string>? TiersMode { get; set; }

        /// <summary>
        /// If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
        /// </summary>
        [Input("transferLookupKey")]
        public Input<bool>? TransferLookupKey { get; set; }

        /// <summary>
        /// Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with
        /// tiers
        /// </summary>
        [Input("transformQuantity")]
        public Input<Inputs.PriceTransformQuantityArgs>? TransformQuantity { get; set; }

        /// <summary>
        /// A positive integer in cents (or -1 for a free price) representing how much to charge.
        /// </summary>
        [Input("unitAmount")]
        public Input<int>? UnitAmount { get; set; }

        /// <summary>
        /// Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unit_amount and
        /// unit_amount_decimal can be set
        /// </summary>
        [Input("unitAmountDecimal")]
        public Input<double>? UnitAmountDecimal { get; set; }

        public PriceArgs()
        {
        }
        public static new PriceArgs Empty => new PriceArgs();
    }

    public sealed class PriceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether the price can be used for new purchases. Defaults to true.
        /// </summary>
        [Input("active")]
        public Input<bool>? Active { get; set; }

        /// <summary>
        /// Describes how to compute the price per period. Either per_unit or tiered. per_unit indicates that the fixed amount
        /// (specified in unit_amount or unit_amount_decimal) will be charged per unit in quantity (for prices with
        /// usage_type=licensed), or per unit of total usage (for prices with usage_type=metered). tiered indicates that the unit
        /// pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.
        /// </summary>
        [Input("billingScheme")]
        public Input<string>? BillingScheme { get; set; }

        /// <summary>
        /// Three-letter ISO currency code, in lowercase.
        /// </summary>
        [Input("currency")]
        public Input<string>? Currency { get; set; }

        [Input("currencyOptions")]
        private InputList<Inputs.PriceCurrencyOptionGetArgs>? _currencyOptions;

        /// <summary>
        /// Prices defined in each available currency option. Each key must be a three-letter ISO currency code and a supported
        /// currency
        /// </summary>
        public InputList<Inputs.PriceCurrencyOptionGetArgs> CurrencyOptions
        {
            get => _currencyOptions ?? (_currencyOptions = new InputList<Inputs.PriceCurrencyOptionGetArgs>());
            set => _currencyOptions = value;
        }

        /// <summary>
        /// When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment
        /// Links
        /// </summary>
        [Input("customUnitAmount")]
        public Input<Inputs.PriceCustomUnitAmountGetArgs>? CustomUnitAmount { get; set; }

        /// <summary>
        /// A lookup key used to retrieve prices dynamically from a static string.
        /// </summary>
        [Input("lookupKey")]
        public Input<string>? LookupKey { get; set; }

        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the
        /// object in a structured format.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// A brief description of the price, hidden from customers.
        /// </summary>
        [Input("nickname")]
        public Input<string>? Nickname { get; set; }

        /// <summary>
        /// The ID of the product that this price will belong to.
        /// </summary>
        [Input("product")]
        public Input<string>? Product { get; set; }

        /// <summary>
        /// The recurring components of a price such as interval and usage_type.
        /// </summary>
        [Input("recurring")]
        public Input<Inputs.PriceRecurringGetArgs>? Recurring { get; set; }

        /// <summary>
        /// Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of inclusive, exclusive, or
        /// unspecified. Once specified as either inclusive or exclusive, it cannot be changed.
        /// </summary>
        [Input("taxBehavior")]
        public Input<string>? TaxBehavior { get; set; }

        [Input("tiers")]
        private InputList<Inputs.PriceTierGetArgs>? _tiers;

        /// <summary>
        /// Each element represents a pricing tier. This parameter requires billing_scheme to be set to tiered. See also the
        /// documentation for billing_scheme.
        /// </summary>
        public InputList<Inputs.PriceTierGetArgs> Tiers
        {
            get => _tiers ?? (_tiers = new InputList<Inputs.PriceTierGetArgs>());
            set => _tiers = value;
        }

        /// <summary>
        /// Defines if the tiering price should be graduated or volume based. In volume-based tiering, the maximum quantity within a
        /// period determines the per unit price, in graduated tiering pricing can successively change as the quantity grows.
        /// </summary>
        [Input("tiersMode")]
        public Input<string>? TiersMode { get; set; }

        /// <summary>
        /// If set to true, will atomically remove the lookup key from the existing price, and assign it to this price.
        /// </summary>
        [Input("transferLookupKey")]
        public Input<bool>? TransferLookupKey { get; set; }

        /// <summary>
        /// Apply a transformation to the reported usage or set quantity before computing the billed price. Cannot be combined with
        /// tiers
        /// </summary>
        [Input("transformQuantity")]
        public Input<Inputs.PriceTransformQuantityGetArgs>? TransformQuantity { get; set; }

        /// <summary>
        /// One of one_time or recurring depending on whether the price is for a one-time purchase or a recurring (subscription)
        /// purchase
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// A positive integer in cents (or -1 for a free price) representing how much to charge.
        /// </summary>
        [Input("unitAmount")]
        public Input<int>? UnitAmount { get; set; }

        /// <summary>
        /// Same as unit_amount, but accepts a decimal value in cents with at most 12 decimal places. Only one of unit_amount and
        /// unit_amount_decimal can be set
        /// </summary>
        [Input("unitAmountDecimal")]
        public Input<double>? UnitAmountDecimal { get; set; }

        public PriceState()
        {
        }
        public static new PriceState Empty => new PriceState();
    }
}
